/*
 * Copyright 2024 Broadcom. All rights reserved.
 */

plugins {
  id 'java'
  id 'distribution'
  id 'maven-publish'
  id 'java-library'
  id 'com.diffplug.spotless' version '6.13.0'
}

targetCompatibility = '1.8'

group 'dev.gemfire'
version '0.1.0'

repositories {
  mavenCentral()

  maven {
    name = 'VMware Repository'
    url = project.findProperty("commercialRepository") ?: "https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire"
    credentials {
      username = System.getenv("COMMERCIAL_MAVEN_USERNAME")
      password = System.getenv("COMMERCIAL_MAVEN_PASSWORD")
    }
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      pom {
        name = "${project.group}:${project.name}"
        description = 'A collection of distributed types for use wih GemFire'
        url = 'https://github.com/gemfire/gemfire-distributed-typed'
        developers {
          developer {
            name = 'Jens Deppe'
            email = 'jens.deppe@broadcom.com'
            organization = 'Broadcom'
            organizationUrl = 'https://broadcom.com'
          }
        }
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        scm {
          url = 'https://github.com/gemfire/gemfire-distributed-types'
          connection = 'scm:git:git://github.com/gemfire/gemfire-distributed-types.git'
          developerConnection = 'scm:git:ssh://github.com:gemfire/gemfire-distributed-types.git'
        }
      }

      from components.java
    }
  }

  repositories {
    maven {
      name = "Broadcom"
      url = project.findProperty("publishRepository")
      credentials {
        username = System.getenv("PUBLISH_MAVEN_USERNAME")
        password = System.getenv("PUBLISH_MAVEN_PASSWORD")
      }
    }
  }
}

configurations {
  distribution
}

dependencies {
  api 'com.vmware.gemfire:gemfire-core:10.1.1'
  api 'com.vmware.gemfire:gemfire-logging:10.1.1'
  api 'com.vmware.gemfire:gemfire-log4j:10.1.1'

  testImplementation('org.assertj:assertj-core:3.24.2')
  //  testImplementation 'com.vmware.gemfire:gemfire-core:10.0.1'
  testImplementation('com.vmware.gemfire:gemfire-junit:10.1.1')
  testImplementation('com.vmware.gemfire:gemfire-dunit:10.1.1')

  //  testRuntimeOnly 'com.vmware.gemfire:gemfire-log4j:10.1.1'
  //  testRuntimeOnly 'com.vmware.gemfire:gemfire-logging:10.1.1'
}

java {
  withSourcesJar()
  withJavadocJar()
}

test {
  useJUnit()
}

import groovy.xml.*
import org.gradle.util.VersionNumber

final jbossModuleName = "${project.group}.${project.name}:${VersionNumber.parse(project.version).major}"

tasks.register("generateModuleXml") { task ->
  final file = file(task.temporaryDir.toPath().resolve("module.xml"))
  doLast {
    file.withWriter { writer ->
      def xml = new MarkupBuilder(new IndentPrinter(writer, "  ", true))
      xml.doubleQuotes = true
      xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')
      xml.module(xmlns: 'urn:jboss:module:1.9', 'name': jbossModuleName) {
        resources {
          'resource-root'('path': tasks.named('jar').get().outputs.files.singleFile.name)
          configurations.distribution.files.forEach() { dep ->
            'resource-root'('path': dep.name)
          }
        }
        delegate.dependencies {
          module('name': 'java.se', 'export': 'false', 'optional': 'false', 'services': 'import')
          module('name': 'gemfire', 'export': 'false', 'optional': 'false', 'services': 'import')
        }
      }
    }
  }
  outputs.file(file)
}

distributions {
  main {
    distributionBaseName = distributionPrefix
    contents {
      into('lib') {
        from(jar)
        from(configurations.distribution)
      }
    }
  }
  extension {
    distributionBaseName = distributionPrefix
    contents {
      with copySpec {
        into(jbossModuleName.replaceAll('[.:]', '/'))
        from(jar)
        from(configurations.distribution)
        from(generateModuleXml)
      }
      with copySpec {
        from('src/main/dist')
      }
    }
  }
}

spotless {
  lineEndings = 'unix'
  java {
    target project.fileTree(project.projectDir) {
      include '**/*.java'
      exclude '**/generated-src/**'
      exclude '**/build/**'
    }

    removeUnusedImports()

    custom 'Remove commented-out import statements', {
      it.replaceAll(/\n\/\/ import .*?;.*/, '')
    }
    custom 'Refuse wildcard imports', {
      // Wildcard imports can't be resolved by spotless itself.
      // This will require the developer themselves to adhere to best practices.
      if (it =~ /\nimport .*\*;/) {
        throw new AssertionError("Do not use wildcard imports.  'spotlessApply' cannot resolve this issue.")
      }
    }
    importOrderFile "${rootDir}/etc/eclipseOrganizeImports.importorder"

    custom 'Remove unhelpful javadoc stubs', {
      // e.g., remove the following lines:
      // "* @param paramName"
      // "* @throws ExceptionType"
      // "* @return returnType"'
      // Multiline to allow anchors on newlines
      it.replaceAll(/(?m)^ *\* *@(?:param|throws|return) *\w* *\n/, '')
    }
    custom 'Remove any empty Javadocs and block comments', {
      // Matches any /** [...] */ or /* [...] */ that contains:
      // (a) only whitespace
      // (b) trivial information, such as "@param paramName" or @throws ExceptionType
      //     without any additional information.  This information is implicit in the signature.
      it.replaceAll(/\/\*+\s*\n(\s*\*\s*\n)*\s*\*+\/\s*\n/, '')
    }

    // Enforce style modifier order
    custom 'Modifier ordering', {
      def modifierRanking = [
          "public"      : 1,
          "protected"   : 2,
          "private"     : 3,
          "abstract"    : 4,
          "default"     : 5,
          "static"      : 6,
          "final"       : 7,
          "transient"   : 8,
          "volatile"    : 9,
          "synchronized": 10,
          "native"      : 11,
          "strictfp"    : 12]
      // Find any instance of multiple modifiers. Lead with a non-word character to avoid
      // accidental matching against for instance, "an alternative default value"
      it.replaceAll(/\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
        // Do not replace the leading non-word character.  Identify the modifiers
        it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
          // Sort the modifiers according to the ranking above
          it.split().sort({ modifierRanking[it] }).join(' ') + ' '
        }
        )
      }
      )
    }

    // Notes on eclipse formatter version:
    // 4.6.3 is consistent with existing / previous behavior.
    // 4.7.1 works, but had different default whitespace rules, notably with mid-ternary linebreak.
    // 4.7.2 exists but is currently incompatible with our style file, raising NPEs.

    // The format file is relative to gemfire-core and not the root project as the root project would change
    // if Geode and submodules are included as part of a different gradle project.
    eclipse('4.6.3').configFile "${rootDir}/etc/eclipse-java-google-style.xml"
    trimTrailingWhitespace()
    endWithNewline()
  }

  groovyGradle {
    target project.fileTree(project.projectDir) {
      include '**/*.gradle'
      exclude '**/generated-src/**'
      exclude '**/build/**'
    }

    toggleOffOn()
    //    greclipse('4.6.3') // odd formatting, no soft-errors
    //    greclipse('4.8.1') // latest release, with soft-errors
    greclipse() // default (latest?), with soft-errors


    custom 'Use single-quote in project directives.', {
      it.replaceAll(/project\(":([^"]*)"\)$/, 'project(\':$1\')')
    }

    custom 'Use parenthesis in single-line gradle dependency declarations.', {
      it.replaceAll(/\n(\s*\S*(?:[cC]ompile|[rR]untime|[iI]mplementation|[tT]est)(?:Only)?) (?!\()([^{\n]*)\n/, { original, declaration, dep ->
        "\n${declaration}(${dep})\n"
      })
    }

    replaceRegex('Do not pad spaces before parenthesis in gradle dependency declaration.',
        /\n(\s*\S*(?:[cC]ompile|[rR]untime|[iI]mplementation|[tT]est)(?:Only)?) +\(/,
        '\n$1(')

    indentWithSpaces(2)
    endWithNewline()
  }
}
