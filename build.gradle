/*
 * Copyright 2024 Broadcom. All rights reserved.
 */

plugins {
  id 'java-library'
  id 'distribution'
  id 'maven-publish'
}

targetCompatibility = '1.8'

group 'dev.gemfire'
version '0.1.2'

repositories {
  mavenCentral()

  maven {
    name = 'Broadcom Repository'
    url = project.findProperty("commercialRepository") ?: "https://packages.broadcom.com/artifactory/gemfire"
    credentials {
      username = System.getenv("COMMERCIAL_MAVEN_USERNAME")
      password = System.getenv("COMMERCIAL_MAVEN_PASSWORD")
    }
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      pom {
        name = "${project.group}:${project.name}"
        description = 'A collection of distributed types for use wih GemFire'
        url = 'https://github.com/gemfire/gemfire-distributed-typed'
        developers {
          developer {
            name = 'Jens Deppe'
            email = 'jens.deppe@broadcom.com'
            organization = 'Broadcom'
            organizationUrl = 'https://broadcom.com'
          }
        }
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        scm {
          url = 'https://github.com/gemfire/gemfire-distributed-types'
          connection = 'scm:git:git://github.com/gemfire/gemfire-distributed-types.git'
          developerConnection = 'scm:git:ssh://github.com:gemfire/gemfire-distributed-types.git'
        }
      }

      from components.java
    }
  }

  repositories {
    maven {
      name = "Broadcom"
      url = project.findProperty("publishRepository")
      credentials {
        username = System.getenv("PUBLISH_MAVEN_USERNAME")
        password = System.getenv("PUBLISH_MAVEN_PASSWORD")
      }
    }
  }
}

configurations {
  distribution
  implementation.extendsFrom(distribution)
}

dependencies {
  api('com.vmware.gemfire:gemfire-core:10.1.1')

  implementation('com.vmware.gemfire:gemfire-membership:10.1.1')
  implementation('com.vmware.gemfire:gemfire-logging:10.1.1')
  implementation('com.vmware.gemfire:gemfire-log4j:10.1.1')

  distribution('org.apache.commons:commons-collections4:4.4')

  testImplementation('org.assertj:assertj-core:3.24.2')
  testImplementation('com.vmware.gemfire:gemfire-junit:10.1.1')
  testImplementation('com.vmware.gemfire:gemfire-dunit:10.1.1')
}

java {
  withSourcesJar()
  withJavadocJar()
}

test {
  useJUnit()
}

import groovy.xml.*
import org.gradle.util.VersionNumber

final jbossModuleName = "${project.group}.${project.name}:${VersionNumber.parse(project.version).major}"

tasks.register("generateModuleXml") { task ->
  final file = file(task.temporaryDir.toPath().resolve("module.xml"))
  doLast {
    file.withWriter { writer ->
      def xml = new MarkupBuilder(new IndentPrinter(writer, "  ", true))
      xml.doubleQuotes = true
      xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')
      xml.module(xmlns: 'urn:jboss:module:1.9', 'name': jbossModuleName) {
        resources {
          'resource-root'('path': tasks.named('jar').get().outputs.files.singleFile.name)
          configurations.distribution.files.forEach() { dep ->
            'resource-root'('path': dep.name)
          }
        }
        delegate.dependencies {
          module('name': 'java.se', 'export': 'false', 'optional': 'false', 'services': 'import')
          module('name': 'gemfire', 'export': 'false', 'optional': 'false', 'services': 'import')
        }
      }
    }
  }
  outputs.file(file)
}

distributions {
  extension {
    distributionBaseName = distributionPrefix
    contents {
      with copySpec {
        into(jbossModuleName.replaceAll('[.:]', '/'))
        from(jar)
        from(configurations.distribution)
        from(generateModuleXml)
      }
      with copySpec {
        from('src/main/dist')
      }
    }
  }
}

extensionDistZip {
  eachFile { file ->
    String path = file.relativePath
    file.setPath(path.substring(path.indexOf("/")+1,path.length()))
  }
  archiveExtension.set("gfm")
}

javadoc {
  configure( options ) {
    tags(
        'todo:X"',
        'apiNote:a:API Note:',
        'implSpec:a:Implementation Requirements:',
        'implNote:a:Implementation Note:'
    )
  }
}
